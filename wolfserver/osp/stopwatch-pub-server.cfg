// OSP - Stopwatch sample match (pub) config
// ------------------------------------------
// 08 Aug 2002
//
// If its an obvious var that isn't specified here, and
// seems to get reset upon server launch, then its probably
// a cvar controlled by the server_autoconfig 2 setting.
//
// Check the Docs/osp-wolf-ServerSettings.txt doc for a complete
// list of all variables affected by the server_autoconfig 2
// setting.
//

// passwords
set g_needpass 1
set g_password ""
set rconpassword ""
set ref_password ""
set sv_privatepassword ""

// server settings
set sv_allowanonymous 0
set sv_allowdownload 1
set sv_hostname "OSP Public RTCW Server"
set sv_pure 1
set sv_maxclients 20
set sv_minping 0
set sv_maxping 0
set sv_minrate 2500
set sv_maxrate 25000
set sv_privateclients 4
set sv_reconnectlimit 3
set sv_timeout 300

// mode and warmup
set g_gametype 6

// "pub" server settings
set server_autoconfig 2

// voting
set vote_limit 1
set vote_percent 51

// punkbuster
pb_sv_enable
pb_sv_cvar rate in 2500 25000
pb_sv_cvar cl_timenudge in -50 0
pb_sv_cvar snaps in 20 40
pb_sv_cvar cl_maxpackets in 30 100
pb_sv_cvar r_picmip in 0 5
pb_sv_cvar cg_bobup in 0 0.005

// map rotation
set m_rotate1a "map mp_assault; set nextmap vstr m_rotate1b; say ^2Round ^11^2 of 4, Next map is mp_base"
set m_rotate1b "map_restart 0; set nextmap vstr m_rotate1c; say ^2Round ^12^2 of 4, Next map is mp_base"
set m_rotate1c "map_restart 0; set nextmap vstr m_rotate1d; say ^2Round ^13^2 of 4, Next map is mp_base"
set m_rotate1d "map_restart 0; set nextmap vstr m_rotate2a; say ^2Round ^14^2 of 4, Next map is mp_base"

set m_rotate2a "map mp_base; set nextmap vstr m_rotate2b; say ^2Round ^11^2 of 4, Next map is mp_beach"
set m_rotate2b "map_restart 0; set nextmap vstr m_rotate2c; say ^2Round ^12^2 of 4, Next map is mp_beach"
set m_rotate2c "map_restart 0; set nextmap vstr m_rotate2d; say ^2Round ^13^2 of 4, Next map is mp_beach"
set m_rotate2d "map_restart 0; set nextmap vstr m_rotate3a; say ^2Round ^14^2 of 4, Next map is mp_beach"

set m_rotate3a "map mp_beach; set nextmap vstr m_rotate3b; say ^2Round ^11^2 of 4, Next map is mp_chateau"
set m_rotate3b "map_restart 0; set nextmap vstr m_rotate3c; say ^2Round ^12^2 of 4, Next map is mp_chateau"
set m_rotate3c "map_restart 0; set nextmap vstr m_rotate3d; say ^2Round ^13^2 of 4, Next map is mp_chateau"
set m_rotate3d "map_restart 0; set nextmap vstr m_rotate4a; say ^2Round ^14^2 of 4, Next map is mp_chateau"

set m_rotate4a "map mp_chateau; set nextmap vstr m_rotate4b; say ^2Round ^11^2 of 4, Next map is mp_dam"
set m_rotate4b "map_restart 0; set nextmap vstr m_rotate4c; say ^2Round ^12^2 of 4, Next map is mp_dam"
set m_rotate4c "map_restart 0; set nextmap vstr m_rotate4d; say ^2Round ^13^2 of 4, Next map is mp_dam"
set m_rotate4d "map_restart 0; set nextmap vstr m_rotate5a; say ^2Round ^14^2 of 4, Next map is mp_dam"

set m_rotate5a "map mp_dam; set nextmap vstr m_rotate5b; say ^2Round ^11^2 of 4, Next map is mp_ice"
set m_rotate5b "map_restart 0; set nextmap vstr m_rotate5c; say ^2Round ^12^2 of 4, Next map is mp_ice"
set m_rotate5c "map_restart 0; set nextmap vstr m_rotate5d; say ^2Round ^13^2 of 4, Next map is mp_ice"
set m_rotate5d "map_restart 0; set nextmap vstr m_rotate6a; say ^2Round ^14^2 of 4, Next map is mp_ice"

set m_rotate6a "map mp_ice; set nextmap vstr m_rotate6b; say ^2Round ^11^2 of 4, Next map is mp_rocket"
set m_rotate6b "map_restart 0; set nextmap vstr m_rotate6c; say ^2Round ^12^2 of 4, Next map is mp_rocket"
set m_rotate6c "map_restart 0; set nextmap vstr m_rotate6d; say ^2Round ^13^2 of 4, Next map is mp_rocket"
set m_rotate6d "map_restart 0; set nextmap vstr m_rotate7a; say ^2Round ^14^2 of 4, Next map is mp_rocket"

set m_rotate7a "map mp_rocket; set nextmap vstr m_rotate7b; say ^2Round ^11^2 of 4, Next map is mp_sub"
set m_rotate7b "map_restart 0; set nextmap vstr m_rotate7c; say ^2Round ^12^2 of 4, Next map is mp_sub"
set m_rotate7c "map_restart 0; set nextmap vstr m_rotate7d; say ^2Round ^13^2 of 4, Next map is mp_sub"
set m_rotate7d "map_restart 0; set nextmap vstr m_rotate8a; say ^2Round ^14^2 of 4, Next map is mp_sub"

set m_rotate8a "map mp_sub; set nextmap vstr m_rotate8b; say ^2Round ^11^2 of 4, Next map is mp_village"
set m_rotate8b "map_restart 0; set nextmap vstr m_rotate8c; say ^2Round ^12^2 of 4, Next map is mp_village"
set m_rotate8c "map_restart 0; set nextmap vstr m_rotate8d; say ^2Round ^13^2 of 4, Next map is mp_village"
set m_rotate8d "map_restart 0; set nextmap vstr m_rotate9a; say ^2Round ^14^2 of 4, Next map is mp_village"

set m_rotate9a "map mp_village; set nextmap vstr m_rotate9b; say ^2Round ^11^2 of 4, Next map is mp_assault"
set m_rotate9b "map_restart 0; set nextmap vstr m_rotate9c; say ^2Round ^12^2 of 4, Next map is mp_assault"
set m_rotate9c "map_restart 0; set nextmap vstr m_rotate9d; say ^2Round ^13^2 of 4, Next map is mp_assault"
set m_rotate9d "map_restart 0; set nextmap vstr m_rotate1a; say ^2Round ^14^2 of 4, Next map is mp_assault"

vstr m_rotate1a


